import React, { useState, useEffect, useRef } from 'react';
import * as tf from '@tensorflow/tfjs';
import {
    Container, Paper, TextField, Button, List, ListItem, Typography, Box, CircularProgress,
} from '@mui/material';
import SendIcon from '@mui/icons-material/Send';

// ----------------------------------------------------
// D·ªØ li·ªáu v√† Ti·ªÅn x·ª≠ l√Ω (Gi·∫£ ƒë·ªãnh Logic)
// ----------------------------------------------------

// T·ª´ ƒëi·ªÉn m√£ h√≥a: m√¥ ph·ªèng qu√° tr√¨nh token h√≥a v√† vector h√≥a
const WORD_INDEX = {
    'ch√†o': 1, 'b·∫°n': 2, 'gi√°': 3, 'bao': 4, 'nhi√™u': 5,
    'c·∫£m': 6, '∆°n': 7, 'xin': 8, 'c√°m': 9,
};
const INTENT_CLASSES = ['chao_hoi', 'hoi_gia', 'cam_on', 'kh√°c'];
const MAX_SEQUENCE_LENGTH = 10; // ƒê·ªô d√†i t·ªëi ƒëa c·ªßa chu·ªói input

// H√†m Ti·ªÅn x·ª≠ l√Ω: chuy·ªÉn c√¢u th√†nh m·∫£ng s·ªë (vector) cho m√¥ h√¨nh
const preprocess = (text) => {
    if (!text || typeof text !== 'string') {
        return new Array(MAX_SEQUENCE_LENGTH).fill(0);
    }

    const words = text.toLowerCase().split(/\s+/);
    let sequence = words
        .map(word => WORD_INDEX[word] || 0) // √Ånh x·∫° t·ª´ th√†nh s·ªë
        .filter(val => val !== 0);

    // ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t m·ªôt ph·∫ßn t·ª≠
    if (sequence.length === 0) {
        sequence = [0];
    }

    // ƒê·ªám (padding) chu·ªói ƒë·∫ßu v√†o
    while (sequence.length < MAX_SEQUENCE_LENGTH) {
        sequence.push(0);
    }
    return sequence.slice(0, MAX_SEQUENCE_LENGTH);
};

// ----------------------------------------------------
// Component ch√≠nh React
// ----------------------------------------------------

const ClientChatbot = () => {
    const [model, setModel] = useState(null);
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [loading, setLoading] = useState(true);
    const messagesEndRef = useRef(null);

    // Cu·ªôn xu·ªëng cu·ªëi tin nh·∫Øn
    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    // 1. T·∫£i M√¥ h√¨nh (Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount)
    useEffect(() => {
        const loadModel = async () => {
            try {
                // T·∫£i m√¥ h√¨nh t·ª´ th∆∞ m·ª•c public, ch·∫°y ho√†n to√†n client-side
                const loadedModel = await tf.loadLayersModel('/model/model.json');
                setModel(loadedModel);
                setLoading(false);
                setMessages([{ sender: 'bot', text: 'ü§ñ ƒê√£ t·∫£i AI th√†nh c√¥ng! B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?' }]);
            } catch (error) {
                console.error('L·ªói khi t·∫£i m√¥ h√¨nh TF.js:', error);
                setLoading(false);
                // Fallback: S·ª≠ d·ª•ng m√¥ h√¨nh gi·∫£ l·∫≠p khi kh√¥ng c√≥ file m√¥ h√¨nh
                setModel('mock');
                setMessages([{
                    sender: 'bot',
                    text: '‚ö†Ô∏è Ch·∫ø ƒë·ªô demo: M√¥ h√¨nh AI kh√¥ng c√≥ s·∫µn, s·ª≠ d·ª•ng logic gi·∫£ l·∫≠p.'
                }]);
            }
        };
        loadModel();
    }, []);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    // Logic t·∫°o ph·∫£n h·ªìi d·ª±a tr√™n √ù ƒë·ªãnh (Intent)
    const getBotResponse = (intent) => {
        switch (intent) {
            case 'chao_hoi':
                return 'Xin ch√†o! T√¥i l√† AI ch·∫°y tr√™n tr√¨nh duy·ªát c·ªßa b·∫°n.';
            case 'hoi_gia':
                return 'V·ªÅ gi√°, t√¥i c·∫ßn b·∫°n truy c·∫≠p trang pricing ƒë·ªÉ xem chi ti·∫øt.';
            case 'cam_on':
                return 'B·∫°n th·∫≠t t·ª≠ t·∫ø! Kh√¥ng c√≥ g√¨.';
            case 'kh√°c':
            default:
                return 'Xin l·ªói, t√¥i ch·ªâ hi·ªÉu c√°c ch·ªß ƒë·ªÅ c∆° b·∫£n (Ch√†o h·ªèi, Gi√°).';
        }
    };

    // 2. X·ª≠ l√Ω G·ª≠i v√† Suy lu·∫≠n
    const handleSend = async () => {
        if (!input.trim() || !model) return;

        const userMessage = { sender: 'user', text: input.trim() };
        setMessages((prev) => [...prev, userMessage]);
        const currentInput = input.trim();
        setInput('');

        let inputTensor = null;
        let prediction = null;

        try {
            // a. Ti·ªÅn x·ª≠ l√Ω
            const processedInput = preprocess(currentInput);

            // b. X·ª≠ l√Ω m√¥ h√¨nh th·∫≠t ho·∫∑c gi·∫£ l·∫≠p
            if (model === 'mock') {
                // Logic gi·∫£ l·∫≠p d·ª±a tr√™n t·ª´ kh√≥a
                const lowerInput = currentInput.toLowerCase();
                let predictedIntent = 'kh√°c';

                if (lowerInput.includes('ch√†o') || lowerInput.includes('xin ch√†o')) {
                    predictedIntent = 'chao_hoi';
                } else if (lowerInput.includes('gi√°') || lowerInput.includes('bao nhi√™u')) {
                    predictedIntent = 'hoi_gia';
                } else if (lowerInput.includes('c·∫£m ∆°n') || lowerInput.includes('c√°m ∆°n')) {
                    predictedIntent = 'cam_on';
                }

                const botText = getBotResponse(predictedIntent);
                setTimeout(() => {
                    const botMessage = { sender: 'bot', text: botText };
                    setMessages((prev) => [...prev, botMessage]);
                }, 500);
                return;
            }

            // c. T·∫°o Tensor v√† Ch·∫°y M√¥ h√¨nh th·∫≠t (Inference)
            inputTensor = tf.tensor2d([processedInput]);
            prediction = model.predict(inputTensor);

            // d. L·∫•y k·∫øt qu·∫£
            const values = prediction.dataSync();
            const intentIndex = tf.argMax(values).dataSync()[0];

            // e. Validation k·∫øt qu·∫£
            const predictedIntent = INTENT_CLASSES[intentIndex] || 'kh√°c';

            // f. T·∫°o v√† C·∫≠p nh·∫≠t ph·∫£n h·ªìi bot
            const botText = getBotResponse(predictedIntent);

            setTimeout(() => {
                const botMessage = { sender: 'bot', text: botText };
                setMessages((prev) => [...prev, botMessage]);
            }, 500);

        } catch (error) {
            console.error('L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:', error);
            setTimeout(() => {
                const botMessage = {
                    sender: 'bot',
                    text: '‚ùå L·ªói x·ª≠ l√Ω: Vui l√≤ng th·ª≠ l·∫°i.'
                };
                setMessages((prev) => [...prev, botMessage]);
            }, 500);
        } finally {
            // g. Gi·∫£i ph√≥ng b·ªô nh·ªõ Tensor
            if (inputTensor) inputTensor.dispose();
            if (prediction) prediction.dispose();
        }
    };

    // 3. Giao di·ªán (Material UI)
    return (
        <Container maxWidth="sm" sx={{ mt: 4 }}>
            <Typography variant="h4" gutterBottom>
                ü§ñ Chatbot Client-Side (TF.js)
            </Typography>
            <Paper elevation={3} sx={{ height: 500, display: 'flex', flexDirection: 'column' }}>
                {loading ? (
                    <Box sx={{ flexGrow: 1, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                        <CircularProgress />
                        <Typography sx={{ ml: 2 }}>ƒêang t·∫£i m√¥ h√¨nh AI t·ª´ tr√¨nh duy·ªát...</Typography>
                    </Box>
                ) : (
                    <>
                        <List sx={{ flexGrow: 1, overflowY: 'auto', p: 2 }}>
                            {messages.map((msg, index) => (
                                <ListItem key={index} sx={{ justifyContent: msg.sender === 'user' ? 'flex-end' : 'flex-start' }}>
                                    <Paper
                                        variant="outlined"
                                        sx={{
                                            p: 1.5,
                                            maxWidth: '80%',
                                            backgroundColor: msg.sender === 'user' ? '#e3f2fd' : '#f0f0f0',
                                            borderRadius: '15px',
                                        }}
                                    >
                                        <Typography variant="body2">{msg.text}</Typography>
                                    </Paper>
                                </ListItem>
                            ))}
                            <div ref={messagesEndRef} />
                        </List>
                        <Box sx={{ p: 2, display: 'flex', borderTop: '1px solid #ccc' }}>
                            <TextField
                                fullWidth
                                variant="outlined"
                                placeholder="Nh·∫≠p tin nh·∫Øn (V√≠ d·ª•: Ch√†o b·∫°n, Gi√° bao nhi√™u?)..."
                                value={input}
                                onChange={(e) => setInput(e.target.value)}
                                onKeyPress={(e) => {
                                    if (e.key === 'Enter') {
                                        handleSend();
                                    }
                                }}
                            />
                            <Button
                                variant="contained"
                                color="primary"
                                endIcon={<SendIcon />}
                                onClick={handleSend}
                                disabled={!model}
                                sx={{ ml: 1 }}
                            >
                                G·ª≠i
                            </Button>
                        </Box>
                    </>
                )}
            </Paper>
        </Container>
    );
};

export default ClientChatbot;